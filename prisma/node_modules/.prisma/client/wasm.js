
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SignalScalarFieldEnum = {
  id: 'id',
  scriptName: 'scriptName',
  dateFrom: 'dateFrom',
  dateTo: 'dateTo',
  gistText: 'gistText',
  provenanceTags: 'provenanceTags',
  confidenceScore: 'confidenceScore',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditScalarFieldEnum = {
  id: 'id',
  signalId: 'signalId',
  actorId: 'actorId',
  action: 'action',
  notes: 'notes',
  timestamp: 'timestamp'
};

exports.Prisma.CorrelationJobScalarFieldEnum = {
  jobId: 'jobId',
  signalId: 'signalId',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  resultGist: 'resultGist',
  correlationConfidence: 'correlationConfidence',
  sourcesQueried: 'sourcesQueried'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  roles: 'roles',
  lastVerifiedAt: 'lastVerifiedAt',
  apiKeys: 'apiKeys'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  allowedSources: 'allowedSources',
  rateLimits: 'rateLimits',
  verifierRoles: 'verifierRoles'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SignalStatus = exports.$Enums.SignalStatus = {
  Unverified: 'Unverified',
  HumanVerified: 'HumanVerified',
  Correlated: 'Correlated'
};

exports.Prisma.ModelName = {
  Signal: 'Signal',
  Audit: 'Audit',
  CorrelationJob: 'CorrelationJob',
  User: 'User',
  Setting: 'Setting'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/runner/work/Blackgpt/Blackgpt/prisma/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/runner/work/Blackgpt/Blackgpt/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../..",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "ciName": "GitHub Actions",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Prisma schema for BLACK GPT\n// WARNING: Never store or process data from illicit sources.\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Signal {\n  id              String           @id @default(uuid())\n  scriptName      String\n  dateFrom        DateTime\n  dateTo          DateTime\n  gistText        String\n  provenanceTags  String[]\n  confidenceScore Int\n  status          SignalStatus\n  createdBy       String\n  createdAt       DateTime         @default(now())\n  updatedAt       DateTime         @updatedAt\n  audits          Audit[]\n  correlationJobs CorrelationJob[]\n}\n\nenum SignalStatus {\n  Unverified\n  HumanVerified\n  Correlated\n}\n\nmodel Audit {\n  id        String   @id @default(uuid())\n  signal    Signal   @relation(fields: [signalId], references: [id])\n  signalId  String\n  actorId   String\n  action    String\n  notes     String?\n  timestamp DateTime @default(now())\n}\n\nmodel CorrelationJob {\n  jobId                 String    @id @default(uuid())\n  signal                Signal    @relation(fields: [signalId], references: [id])\n  signalId              String\n  startedAt             DateTime  @default(now())\n  finishedAt            DateTime?\n  resultGist            String?\n  correlationConfidence Int?\n  sourcesQueried        String[]\n}\n\nmodel User {\n  id             String    @id @default(uuid())\n  email          String    @unique\n  roles          String[]\n  lastVerifiedAt DateTime?\n  apiKeys        String[]\n}\n\nmodel Setting {\n  id             String   @id @default(uuid())\n  allowedSources String[]\n  rateLimits     String[]\n  verifierRoles  String[]\n}\n",
  "inlineSchemaHash": "a329b18fc89653c50eb41b47c0f8e70dbd9a3e843ca24c260f03df06de055d34",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Signal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scriptName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateFrom\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"dateTo\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gistText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provenanceTags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confidenceScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SignalStatus\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"audits\",\"kind\":\"object\",\"type\":\"Audit\",\"relationName\":\"AuditToSignal\"},{\"name\":\"correlationJobs\",\"kind\":\"object\",\"type\":\"CorrelationJob\",\"relationName\":\"CorrelationJobToSignal\"}],\"dbName\":null},\"Audit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"signal\",\"kind\":\"object\",\"type\":\"Signal\",\"relationName\":\"AuditToSignal\"},{\"name\":\"signalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CorrelationJob\":{\"fields\":[{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"signal\",\"kind\":\"object\",\"type\":\"Signal\",\"relationName\":\"CorrelationJobToSignal\"},{\"name\":\"signalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"finishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"resultGist\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"correlationConfidence\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sourcesQueried\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roles\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastVerifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"apiKeys\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Setting\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"allowedSources\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rateLimits\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verifierRoles\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

